Please note that there are no longer any copyright restrictions on this
material, since XEPHON is now defunct.  Control of the material has
passed to Bob Thomas of the Enterprise System Journal, and with his
discontinuance of production, control has now passed to www.cbttape.org.
We have no copyright restrictions, and you can freely use this material
in good conscience.


A super TRANSMIT command

THE PROBLEM

Here I am, busily transmitting my dump to another user so they
can look at it. But wait! - what's this?

INMX032I TRANSMIT Command Terminated.  Transmission limit of 50000 records excee
INMX033I You have exceeded the maximum transmission size set by your installatio

My file is too big to be sent with TRANSMIT because a limit
is set system-wide by the IKJTSO00 member of
SYS1.PARMLIB.

There are two reasons for having a limit: to prevent the JES2
spool filling up with files waiting either to be sent to another
node or for a  RECEIVE command, and to prevent your
network from getting backed up trying to send lots of big files
between nodes if you do not have fast lines connecting your
nodes.

If it is necessary to send large files you must resort to tape or
something else, as a single user cannot override the limit. The
extra time it takes to do this can be critical if a severe problem
needs to be fixed.


BACKGROUND

In releases of TSO/E prior to Version 1.4 the TRANSMIT
parameters, which now reside in SYS1.PARMLIB member
IKJTSO00, lived in a CSECT called INMXPARM which was
link-edited to the TRANSMIT command module. In this case,
it was easy to have a work-around by just creating another copy
of TRANSMIT in an authorized library and linking  a different
INMXPARM module in with it. However, once parameters are
put into IKJTSO00, the INMXPARM CSECT is ignored even
if it exists. Parameters cannot then be overridden and everyone
is  restricted to the installation limit.


THE SOLUTION

It seemed that if the TRANSMIT command could find the limit
value somewhere, I should be able to. I found that it exists in
common storage. In order to provide support for both those
who use IKJTSO00 and those who do not, the easiest thing to
do was to parse  IKJTSO00  and create an INMXPARM data
area in storage on the fly. Those who don't use IKJTSO00
could still link-edit INXMPARM and the system would just
point to that  instead. The benefit of this is that once you find
out how to get to the INMXPARM data area, it is easy to find
where the values are since the macros INMXP, INMNODE,
and INMEND are provided with TSO to allow one to create an
INMXPARM CSECT.

So, how do I find INMXPARM? It turns out that finding it is
very easy:

o      The CVTTVT pointer of CVT points to the TSO Vector
      Table (TSVT).

o      The TSVTTPVT pointer of TSVT points to a control block
      called the TPVT (undocumented).

o      TPVT plus X'2C' points to the INMXPARM data area.

Using the macros for INMXPARM, I devised a DSECT that
describes its format. It is then simple to find the value and
change it on the fly. The solution that I chose is very simple.
The steps are:

o      Check authority table for user eligibility

o      Find the values and save them

o      Alter the limit, warning level, and warning interval

o      Invoke the TSO service routine to call TRANSMIT

o      Restore the values to INMXPARM.

The authority table is a list of user-ids  allowed to use the
SUPERXMT command. If the user is not in this list, the
command ends. I would rather have used the System
Authorization Facility (SAF) RACROUTE macro to validate
the user's authority against a CA-ACF2 rule or RACF profile,
but it would have used a lot more code.

Altering the values requires key 0 access to the storage. The
data is stored in ECSA subpool 241, key 0 storage. Since a
normal command uses key 8 it is necessary for the
SUPERXMT command to be linked AC=1 and put in an
authorized library. Likewise, the SUPERXMT command must
be added to the AUTHCMD list of IKJTSO00 so that TSO/E
will be able to invoke it properly. Once all this is done, the
SUPERXMT command is capable of switching to supervisor
state, in which it can change the key it is running in. The
values are then altered.

The TSO service routine is used to invoke the TSO
TRANSMIT command with the parameters used by this
command. When a command is entered, TSO places the
command and parameters into a command buffer and passes
the address of the Command Processor Parameter List (CPPL)
in register 1 to the command. The CPPL contains the address
of the command buffer. An XMIT command can then be
created from the parameter sent.

Once the XMIT command is completed, all that remains is to
reset the values to the installation values. In a nutshell, that's
all there is to it.


NOTES

o      While the XMIT command is invoked within SUPERXMT
      the same limit will apply to everyone doing an XMIT. An
      ENQ/DEQ process could be added to the command to
      prevent this.

o      If the command SUPERXMT doesn't terminate properly
      the values in common storage might not be reset. An
      ESTAE routine could be added to catch errors and restore
      the values.

o      The command should be authorized through SAF to avoid
      dependence on a particular security product; this is more
      flexible than assembling and linking a module for every
      change.

o      A more elegant design for this facility might be to make
      the SUPERXMT command a front-end module link-edited
      to the XMIT/TRANSMIT command. One would then
      make SUPERXMT the main entry point of the module to
      do the authorizations and changes, if authorized, and then
      branch to the TRANSMIT code. This would avoid the
      updates to IKJTSO00 AUTHCMD and would not require a
      separate command.

None of these points are really crucial so I took the easy way
out. I hope this will be of use to you until IBM gives us a
better solution.


SUPERXMT SOURCE CODE

SUPERXMT CSECT
SUPERXMT AMODE 31
SUPERXMT RMODE ANY
         SAVE  (14,12),,'SUPERXMT &SYSDATE &SYSTIME'
         LR    12,15
         USING SUPERXMT,12
         LR    10,1                    Save CPPL address before
         USING CPPL,10                    GETMAIN nukes it
         GETMAIN RU,LV=WORKL           Get some storage
         LR    11,1
         USING WORK,11                 Use R11 to map work area
         LA    2,SAVEAREA              Address of new save area
         ST    13,4(,2)                Chain back to previous save area
         ST    2,8(,13)                Chain forward to new save area
         LR    13,2                    R13 reset to current save area
* Find userid of user                                                 *
         L     1,PSATOLD-PSA           Current TCB
         ICM   1,B'0111',TCBJSCBB-TCB(1)      Get JSCB address
         ICM   1,B'1111',JSCBPSCB-IEZJSCB(1)  Get PSCB address
         BNZ   TSOUSER                 If PSCB address <> 0, TSO user
         WTO   'SUPERXMT is only supported under TSO'
         B     RETURN
* Check table of users for authorization                              *
TSOUSER  DS    0H
         LA    1,PSCBUSER-PSCB(,1)     Point at userid
         LA    2,AUTHUSER              Beginning of table
         LA    3,AUTHUSE#              Number of entries
USERLOOP DS    0H
         CLC   0(7,1),0(2)             Userid match ?
         BE    FRIEND                  Yes...friend
         LA    2,7(,2)                 Next entry in table
         BCT   3,USERLOOP              Loop if more entries
         L     2,CPPLUPT               Get UPT address
         L     3,CPPLECT               Get ECB address
         PUTLINE OUTPUT=(MSG1,,,DATA),PARM=PUTLIST,MF=(E,IOPLADS),     X
               ECT=(3),UPT=(2)         Inform enemy of bad news
         B     RETURN
FRIEND   DS    0H                      Here to let command process
         L     2,CVTPTR                Find CVT
         L     2,CVTTVT-CVT(,2)        Find TSVT
         L     2,TSVTTPVT-TSVT(,2)     Find TPVT (whatever that is)
         L     2,X'2C'(,2)             TPVT+X'2C' is INMXPARM pointer
         USING INMXPARM,2              Use DSECT
         L     3,OUTWARNS              Get warning level start number
         L     4,OUTWARNI              Get warning interval
         L     5,OUTLIMIT              Get the output limit for XMIT
         STM   2,5,OLDINFO             Save data to be restored later
* Get into Superman mode, then key 0 to be allowed to update the      *
* data area in CSA.                                                   *
         MODESET MODE=SUP              Superman
         SPKA  X'00'                   Key 0
* We reset the warning level, warning interval, and limit for         *
* the TRANSMIT command.  Setting the upper limit to 1,000,000 records *
* allows one to transmit up to about 80 megabytes of data.            *
* The data area is in subpool 241, key 0 storage.                     *
         MVC   OUTWARNS(4),=F'100000'  Start warning at 100,000 records
         MVC   OUTWARNI(4),=F'100000'  Warn every 100,000 after that
         MVC   OUTLIMIT(4),=F'1000000' Upper limit is 1,000,000
* Remove the Superman costume                                         *
         SPKA  X'80'                   Back to key 8
         MODESET MODE=PROB             Clark Kent
         MVI   XMITCMD,C' '            Blank out command field
         MVC   XMITCMD+1(L'XMITCMD-1),XMITCMD
         MVC   XMITCMD(5),=C'XMIT '    Put 'XMIT ' into command field
* IKJEFTSR - TSO Service Routine Linkage                              *
* Parms                                                               *
*   +0 ---> Flags ---> +0  X'00'                                      *
*                 ---> +1  X'00'  Invoke in auth'd environment        *
*                          X'01'  Invoke in unauth environment        *
*                 ---> +2  X'00'  Error - no dump                     *
*                          X'01'        - dump                        *
*                 ---> +3  X'01'  Type - command, exec or clist       *
*                          X'02'       - program                      *
*   +4 ---> CMD   ---> Command text                                   *
*   +8 ---> CMDL  ---> Length of command text                         *
*   +C ---> RC    ---> Return code field                              *
*  +10  --> REASN ---> Reason code                                    *
*  +14  --> ABEND ---> ABEND code                                     *
*  +18  --> PARM  ---> Parms to send to send to program               *
*  +1C  --> CPPL  ---> Address of CPPL                                *
*---------------------------------------------------------------------*
*  Get TSO Command Buffer address from CPPL                           *
         L     2,CPPLCBUF              Get command buffer
         LH    1,2(,2)                 Get operands offset
         LA    3,4(1,2)                Operand at text + 4 + offset
         LH    1,0(,2)                 Command buffer length
         AR    1,2                     Add length to start of buffer
         SR    1,3                     Subtract the address of operands
         BCTR  1,0                     Decrement the length for EX
         EX    1,MOVEBUF               Move operands to XMIT command
         L     15,CVTPTR               Point to MVS's vector table
         L     15,CVTTVT-CVT(,15)      Point to TSO's vector table
         L     15,TSVTASF-TSVT(,15)    Point to TSO service facility
         CALL  (15),                                                   X
               (=AL1(0,0,0,1),         Flags                           X
               XMITCMD,                Command text                    X
               =A(L'XMITCMD),          Length of command text          X
               XMITRET,                XMIT return code                X
               XTSREAS,                TSO service routine reason code X
               XTSRABC),               TSO service routine abend code  X
               VL,MF=(E,XCALL)
* Superman Mode again to reset values saved                           *
         MODESET MODE=SUP              Superman mode
         SPKA  X'00'                   Key 0
         LM    2,5,OLDINFO             Get old values
         STM   3,5,X'10'(2)            Restore old values
* Clark Kent Mode again since values are reset                        *
         SPKA  X'80'                   Key 8
         MODESET MODE=PROB             Clark Kent mode
RETURN   DS    0H
         L     13,SAVEAREA+4           R13 = old save area
         L     3,XMITRET               Save XMIT return code
         FREEMAIN RU,LV=WORKL,A=(11)   Free storage
         LR    15,3                    R15 = return code from XMIT
         RETURN (14,12),RC=(15)        Return to caller
* Miscellaneous Static Data                                           *
MOVEBUF  MVC   XMITCMD+5(0),0(3)       Move operands to XMIT command
AUTHUSER DC    CL7'USER1  '            Table of users authorized to use
         DC    CL7'USER2  '
         DC    CL7'USER3  '
AUTHUSE# EQU   (*-AUTHUSER)/7          Number of entries
MSG1     DC    AL2(L'MSG1TEXT+4),AL2(0)
MSG1TEXT DC    C'You are not authorized to use SUPERXMT'
WORK     DSECT
XMITRET  DS    A                       XMIT command return code field
XTSREAS  DS    A                       TSO service routine reason code
XTSRABC  DS    A                       TSO service routine abend code
SAVEAREA DS    18F                     Standard save area
OLDINFO  DS    4A                      Save area for values changed
XCALL    CALL  ,(,,,,,,,,,,,,,,,,,,,,,,,),VL,MF=L
XMITCMD  DS    CL256                   Big long command area
PUTLIST  PUTLINE MF=L                  PUTLINE list format
IOPLADS  DS    4F                      IOPL words required by PUTLINE
WORKL    EQU   *-WORK
* Assembler DSECT Layout of the INMXPARMs module/data area            *
INMXPARM DSECT                     DSECT for INMXPARM stuff
NAME     DS    CL8                 Name = INMXPARM
LENGTH   DS    AL2                 Size of INMXPARM
NUMNODES DS    AL2                 Number of node entries in INMXPARM
NODETABA DS    A                   Address of the node table
OUTWARNS DS    F                   XMIT starts warning at this level
OUTWARNI DS    F                   XMIT warning interval
OUTLIMIT DS    F                   XMIT limit in 80-byte records
         DS    XL8                 Reserved
VIOUNITL DS    F                   VIO Unit name length
VIOUNIT  DS    CL8                 VIO Unit name
         DS    A                   Reserved
         DS    A                   Reserved
         DS    X                   Reserved
         DS    X                   Reserved
COPYCLS  DS    C                   IEBCOPY messages sysout class
         DS    X                   Reserved
LOGLLQ   DS    CL8                 XMIT/RECEIVE log LLQ
LOGLLQL  DS    H                   Length of LOGLLQ
LOGQUAL  DS    CL10                Qualifier to precede LOGLLQ
LOGQUALL DS    H                   Length of LOGQUAL
SYSCTL   DS    CL44                Default system control dataset
SYSCTLL  DS    H                   Length of SYSCTL name
USRCTL   DS    CL44                User control dataset LLQs
USRCTLL  DS    H                   Length of USRCTL
SPOOLCL  DS    C                   Output class to use for NJE
* Node Entries follow the above transmit/receive parameters           *
* One Entry per node defined in INMNODE macros or using IKJTSO00      *
* member of SYS1.PARMLIB                                              *
NODETAB  DSECT                     Node Table DSECT
NODENAME DS    CL8                 Node Name
NODESMF  DS    CL4                 SMF ID
NODERSVD DS    XL4                 Reserved
         IKJTSVT
         CVT   DSECT=YES
         IKJCPPL
         IHAPSA
         IKJTCB
         IKJPSCB
         IEZJSCB
         END


Dan Little
Senior Software Analyst
Royal Bank (Canada)                        c Xephon 1992

